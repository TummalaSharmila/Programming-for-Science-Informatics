{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1mxA8tdYkiDuoEj8mt988YUmNM_8-iwJD","authorship_tag":"ABX9TyNwgLp2xyGyFzgONym6KkwQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"cXBYppSZdbBW","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1727291012530,"user_tz":240,"elapsed":201,"user":{"displayName":"Sharmila Tummala","userId":"17729261948442999683"}},"outputId":"1c93a59a-48b5-4819-c862-441bd36b40b4"},"outputs":[{"output_type":"stream","name":"stdout","text":["c\n","a\n"]}],"source":["#question1\n","#opening the sequence file in read mode with open()\n","with open('chr1_GL383518v1_alt.fa', 'r')as file:\n","    #removing the first line as it is the name of the sequence\n","    next(file)\n","    #reading the sequence into a string variable\n","    seq=file.read()\n","#removing the new line characters\n","seq=seq.replace(\"\\n\",\"\")\n","#Print the 10th letter of this sequence.\n","print(seq[9])\n","#Print the 758th letter of this sequence.\n","print(seq[757])\n"]},{"cell_type":"code","source":["#question 2\n","#creating an empty string\n","revseq= ''\n","#creating a dictionary to substitute the base as per Watson-Crick-Franklin pair\n","revbase = {'a': 't', 'A':'T', 'g':'c', 'G':'C', 't':'a', 'T':'A','c':'g', 'C':'G' }\n","#writing a for loop to access each base from the end of the sequence and substitute it by passing it into the dictionary\n","for base in seq [::-1]:\n","  revseq += revbase[base]\n","#to print 79th letter of the sequence\n","print (revseq[78])\n","#to print letters from 500th letter to 800th letter of the sequence\n","print(revseq[499:799])\n",""],"metadata":{"id":"U3OwfItVFv1Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727292383798,"user_tz":240,"elapsed":156,"user":{"displayName":"Sharmila Tummala","userId":"17729261948442999683"}},"outputId":"259d39ad-a3c8-434c-9768-347773b43592"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["G\n","gatccacccgccttggcctaccatagtgctgggattataggcgtgagccactgtgcctggccagaattagacgtagatttTAATCATGACTTTCCTATTTGTTGTGTTTCTTGGACAGGTTTATACTAAATAAGAAATTATGTAGTATACTAAATAATACTAttttttttgaaatggagtgtctctctgtcacccaggctggagtgcagtggcgggatctcggcttaccgcaacctccgcctcccaggttcaagcaattctcctgtcacagcctcccaaatagctgggactacaggcaca\n"]}]},{"cell_type":"code","source":["#question 3\n","def count_bases(seq):\n","    # creating an empty dictionary\n","    my_dict = {}\n","\n","    # Iterate over the sequence for every 1000 nucleotides using step option in range function\n","    for i in range(0, len(seq), 1000):\n","        # taking key value kilobase position\n","        kilobase = i\n","\n","        # create an empty dictionary for base and its count pair\n","        base_counts = {}\n","\n","        # Extract the current sub sequence of the DNA sequence\n","        subseq = seq[i:i+1000]\n","\n","        # For each nucleotide (A, C, G, T)\n","        for nuc in \"ACGT\":\n","            # Count the occurrences of the base in the current sub sequence of the sequence using count()\n","            count = subseq.count(nuc)\n","\n","            # Store the count in the base_counts dictionary with the nuc as the key\n","            base_counts[nuc] = count\n","\n","        # Store the base_counts dictionary in the my_dict dictionary with the kilobase position as the key\n","        my_dict[kilobase] = base_counts\n","\n","    # Return the my_dict dictionary\n","    return my_dict\n","my_dict= count_bases(seq)\n","print(my_dict)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7-nkT55I13wn","executionInfo":{"status":"ok","timestamp":1727302785890,"user_tz":240,"elapsed":165,"user":{"displayName":"Sharmila Tummala","userId":"17729261948442999683"}},"outputId":"9916aae4-3ec2-4d17-c0d4-e999e8935ff0"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["{0: {'A': 278, 'C': 234, 'G': 257, 'T': 231}, 1000: {'A': 265, 'C': 239, 'G': 222, 'T': 274}, 2000: {'A': 258, 'C': 252, 'G': 255, 'T': 235}, 3000: {'A': 396, 'C': 168, 'G': 267, 'T': 169}, 4000: {'A': 297, 'C': 219, 'G': 205, 'T': 279}, 5000: {'A': 201, 'C': 257, 'G': 208, 'T': 334}, 6000: {'A': 244, 'C': 243, 'G': 201, 'T': 312}, 7000: {'A': 271, 'C': 232, 'G': 282, 'T': 215}, 8000: {'A': 279, 'C': 236, 'G': 229, 'T': 256}, 9000: {'A': 269, 'C': 252, 'G': 222, 'T': 257}, 10000: {'A': 177, 'C': 255, 'G': 206, 'T': 362}, 11000: {'A': 260, 'C': 238, 'G': 204, 'T': 298}, 12000: {'A': 273, 'C': 220, 'G': 273, 'T': 234}, 13000: {'A': 287, 'C': 240, 'G': 192, 'T': 281}, 14000: {'A': 215, 'C': 252, 'G': 196, 'T': 337}, 15000: {'A': 290, 'C': 220, 'G': 199, 'T': 291}, 16000: {'A': 346, 'C': 205, 'G': 193, 'T': 256}, 17000: {'A': 293, 'C': 231, 'G': 240, 'T': 236}, 18000: {'A': 289, 'C': 214, 'G': 288, 'T': 209}, 19000: {'A': 184, 'C': 264, 'G': 250, 'T': 302}, 20000: {'A': 332, 'C': 222, 'G': 242, 'T': 204}, 21000: {'A': 278, 'C': 229, 'G': 228, 'T': 265}, 22000: {'A': 279, 'C': 252, 'G': 244, 'T': 225}, 23000: {'A': 251, 'C': 250, 'G': 236, 'T': 263}, 24000: {'A': 396, 'C': 176, 'G': 266, 'T': 162}, 25000: {'A': 264, 'C': 227, 'G': 218, 'T': 291}, 26000: {'A': 211, 'C': 249, 'G': 207, 'T': 333}, 27000: {'A': 271, 'C': 223, 'G': 212, 'T': 294}, 28000: {'A': 282, 'C': 234, 'G': 275, 'T': 209}, 29000: {'A': 287, 'C': 243, 'G': 229, 'T': 241}, 30000: {'A': 231, 'C': 256, 'G': 205, 'T': 308}, 31000: {'A': 176, 'C': 244, 'G': 211, 'T': 369}, 32000: {'A': 276, 'C': 235, 'G': 217, 'T': 272}, 33000: {'A': 295, 'C': 225, 'G': 261, 'T': 219}, 34000: {'A': 240, 'C': 254, 'G': 202, 'T': 304}, 35000: {'A': 236, 'C': 242, 'G': 183, 'T': 339}, 36000: {'A': 328, 'C': 203, 'G': 185, 'T': 284}, 37000: {'A': 306, 'C': 232, 'G': 206, 'T': 256}, 38000: {'A': 193, 'C': 280, 'G': 229, 'T': 298}, 39000: {'A': 273, 'C': 261, 'G': 226, 'T': 240}, 40000: {'A': 305, 'C': 194, 'G': 242, 'T': 259}, 41000: {'A': 271, 'C': 201, 'G': 219, 'T': 309}, 42000: {'A': 299, 'C': 219, 'G': 187, 'T': 295}, 43000: {'A': 289, 'C': 222, 'G': 255, 'T': 234}, 44000: {'A': 176, 'C': 351, 'G': 256, 'T': 217}, 45000: {'A': 230, 'C': 234, 'G': 309, 'T': 227}, 46000: {'A': 284, 'C': 212, 'G': 250, 'T': 254}, 47000: {'A': 270, 'C': 207, 'G': 224, 'T': 299}, 48000: {'A': 195, 'C': 265, 'G': 231, 'T': 309}, 49000: {'A': 200, 'C': 247, 'G': 225, 'T': 328}, 50000: {'A': 203, 'C': 261, 'G': 251, 'T': 285}, 51000: {'A': 234, 'C': 242, 'G': 222, 'T': 302}, 52000: {'A': 215, 'C': 223, 'G': 249, 'T': 313}, 53000: {'A': 219, 'C': 259, 'G': 207, 'T': 315}, 54000: {'A': 254, 'C': 222, 'G': 202, 'T': 322}, 55000: {'A': 223, 'C': 212, 'G': 202, 'T': 363}, 56000: {'A': 182, 'C': 297, 'G': 240, 'T': 281}, 57000: {'A': 229, 'C': 214, 'G': 227, 'T': 330}, 58000: {'A': 283, 'C': 184, 'G': 251, 'T': 282}, 59000: {'A': 253, 'C': 183, 'G': 245, 'T': 319}, 60000: {'A': 233, 'C': 186, 'G': 288, 'T': 293}, 61000: {'A': 242, 'C': 209, 'G': 207, 'T': 342}, 62000: {'A': 277, 'C': 229, 'G': 226, 'T': 268}, 63000: {'A': 230, 'C': 254, 'G': 256, 'T': 260}, 64000: {'A': 258, 'C': 206, 'G': 228, 'T': 308}, 65000: {'A': 261, 'C': 192, 'G': 281, 'T': 266}, 66000: {'A': 235, 'C': 238, 'G': 211, 'T': 316}, 67000: {'A': 273, 'C': 211, 'G': 248, 'T': 268}, 68000: {'A': 252, 'C': 240, 'G': 193, 'T': 315}, 69000: {'A': 252, 'C': 246, 'G': 242, 'T': 260}, 70000: {'A': 245, 'C': 236, 'G': 257, 'T': 262}, 71000: {'A': 247, 'C': 207, 'G': 234, 'T': 312}, 72000: {'A': 256, 'C': 246, 'G': 260, 'T': 238}, 73000: {'A': 286, 'C': 204, 'G': 248, 'T': 262}, 74000: {'A': 213, 'C': 262, 'G': 214, 'T': 311}, 75000: {'A': 267, 'C': 237, 'G': 302, 'T': 194}, 76000: {'A': 258, 'C': 236, 'G': 250, 'T': 256}, 77000: {'A': 214, 'C': 271, 'G': 227, 'T': 288}, 78000: {'A': 252, 'C': 249, 'G': 205, 'T': 294}, 79000: {'A': 256, 'C': 229, 'G': 265, 'T': 250}, 80000: {'A': 204, 'C': 244, 'G': 293, 'T': 259}, 81000: {'A': 212, 'C': 286, 'G': 237, 'T': 265}, 82000: {'A': 220, 'C': 257, 'G': 190, 'T': 333}, 83000: {'A': 211, 'C': 227, 'G': 202, 'T': 360}, 84000: {'A': 210, 'C': 286, 'G': 254, 'T': 250}, 85000: {'A': 236, 'C': 266, 'G': 249, 'T': 249}, 86000: {'A': 176, 'C': 260, 'G': 250, 'T': 314}, 87000: {'A': 188, 'C': 317, 'G': 254, 'T': 241}, 88000: {'A': 192, 'C': 300, 'G': 299, 'T': 209}, 89000: {'A': 243, 'C': 299, 'G': 275, 'T': 183}, 90000: {'A': 213, 'C': 263, 'G': 248, 'T': 276}, 91000: {'A': 215, 'C': 281, 'G': 283, 'T': 221}, 92000: {'A': 141, 'C': 316, 'G': 376, 'T': 167}, 93000: {'A': 199, 'C': 322, 'G': 251, 'T': 228}, 94000: {'A': 237, 'C': 238, 'G': 351, 'T': 174}, 95000: {'A': 202, 'C': 275, 'G': 298, 'T': 225}, 96000: {'A': 204, 'C': 344, 'G': 216, 'T': 236}, 97000: {'A': 215, 'C': 278, 'G': 280, 'T': 227}, 98000: {'A': 190, 'C': 290, 'G': 231, 'T': 289}, 99000: {'A': 309, 'C': 205, 'G': 261, 'T': 225}, 100000: {'A': 210, 'C': 296, 'G': 286, 'T': 208}, 101000: {'A': 205, 'C': 271, 'G': 211, 'T': 313}, 102000: {'A': 245, 'C': 238, 'G': 178, 'T': 339}, 103000: {'A': 220, 'C': 226, 'G': 192, 'T': 362}, 104000: {'A': 331, 'C': 169, 'G': 222, 'T': 278}, 105000: {'A': 346, 'C': 198, 'G': 234, 'T': 222}, 106000: {'A': 220, 'C': 280, 'G': 262, 'T': 238}, 107000: {'A': 291, 'C': 187, 'G': 282, 'T': 240}, 108000: {'A': 238, 'C': 242, 'G': 286, 'T': 234}, 109000: {'A': 256, 'C': 253, 'G': 311, 'T': 180}, 110000: {'A': 208, 'C': 270, 'G': 340, 'T': 182}, 111000: {'A': 174, 'C': 265, 'G': 351, 'T': 210}, 112000: {'A': 213, 'C': 265, 'G': 318, 'T': 204}, 113000: {'A': 226, 'C': 229, 'G': 338, 'T': 207}, 114000: {'A': 224, 'C': 264, 'G': 301, 'T': 211}, 115000: {'A': 265, 'C': 238, 'G': 269, 'T': 228}, 116000: {'A': 194, 'C': 320, 'G': 272, 'T': 214}, 117000: {'A': 166, 'C': 337, 'G': 259, 'T': 238}, 118000: {'A': 194, 'C': 302, 'G': 284, 'T': 220}, 119000: {'A': 249, 'C': 294, 'G': 276, 'T': 181}, 120000: {'A': 270, 'C': 258, 'G': 219, 'T': 253}, 121000: {'A': 298, 'C': 254, 'G': 210, 'T': 238}, 122000: {'A': 265, 'C': 246, 'G': 221, 'T': 268}, 123000: {'A': 289, 'C': 211, 'G': 254, 'T': 246}, 124000: {'A': 331, 'C': 227, 'G': 231, 'T': 211}, 125000: {'A': 278, 'C': 214, 'G': 246, 'T': 262}, 126000: {'A': 284, 'C': 234, 'G': 229, 'T': 253}, 127000: {'A': 231, 'C': 266, 'G': 227, 'T': 276}, 128000: {'A': 306, 'C': 195, 'G': 250, 'T': 249}, 129000: {'A': 293, 'C': 205, 'G': 197, 'T': 305}, 130000: {'A': 300, 'C': 211, 'G': 200, 'T': 289}, 131000: {'A': 337, 'C': 213, 'G': 236, 'T': 214}, 132000: {'A': 352, 'C': 204, 'G': 209, 'T': 235}, 133000: {'A': 296, 'C': 212, 'G': 233, 'T': 259}, 134000: {'A': 313, 'C': 203, 'G': 239, 'T': 245}, 135000: {'A': 262, 'C': 261, 'G': 195, 'T': 282}, 136000: {'A': 336, 'C': 199, 'G': 207, 'T': 258}, 137000: {'A': 217, 'C': 257, 'G': 203, 'T': 323}, 138000: {'A': 289, 'C': 216, 'G': 226, 'T': 269}, 139000: {'A': 251, 'C': 231, 'G': 209, 'T': 309}, 140000: {'A': 241, 'C': 248, 'G': 205, 'T': 306}, 141000: {'A': 334, 'C': 208, 'G': 233, 'T': 225}, 142000: {'A': 243, 'C': 252, 'G': 208, 'T': 297}, 143000: {'A': 315, 'C': 211, 'G': 274, 'T': 200}, 144000: {'A': 278, 'C': 234, 'G': 193, 'T': 295}, 145000: {'A': 322, 'C': 204, 'G': 191, 'T': 283}, 146000: {'A': 302, 'C': 209, 'G': 239, 'T': 250}, 147000: {'A': 231, 'C': 257, 'G': 218, 'T': 294}, 148000: {'A': 337, 'C': 203, 'G': 216, 'T': 244}, 149000: {'A': 318, 'C': 209, 'G': 201, 'T': 272}, 150000: {'A': 274, 'C': 243, 'G': 227, 'T': 256}, 151000: {'A': 307, 'C': 215, 'G': 230, 'T': 248}, 152000: {'A': 287, 'C': 203, 'G': 200, 'T': 310}, 153000: {'A': 309, 'C': 214, 'G': 214, 'T': 263}, 154000: {'A': 380, 'C': 179, 'G': 151, 'T': 290}, 155000: {'A': 298, 'C': 199, 'G': 230, 'T': 273}, 156000: {'A': 295, 'C': 197, 'G': 228, 'T': 280}, 157000: {'A': 290, 'C': 225, 'G': 225, 'T': 260}, 158000: {'A': 252, 'C': 208, 'G': 176, 'T': 364}, 159000: {'A': 210, 'C': 251, 'G': 196, 'T': 343}, 160000: {'A': 341, 'C': 223, 'G': 211, 'T': 225}, 161000: {'A': 406, 'C': 162, 'G': 192, 'T': 240}, 162000: {'A': 280, 'C': 219, 'G': 210, 'T': 291}, 163000: {'A': 184, 'C': 272, 'G': 216, 'T': 328}, 164000: {'A': 269, 'C': 236, 'G': 132, 'T': 363}, 165000: {'A': 250, 'C': 237, 'G': 208, 'T': 305}, 166000: {'A': 257, 'C': 230, 'G': 172, 'T': 341}, 167000: {'A': 258, 'C': 245, 'G': 205, 'T': 292}, 168000: {'A': 281, 'C': 206, 'G': 197, 'T': 316}, 169000: {'A': 232, 'C': 262, 'G': 229, 'T': 277}, 170000: {'A': 245, 'C': 220, 'G': 201, 'T': 334}, 171000: {'A': 338, 'C': 164, 'G': 185, 'T': 313}, 172000: {'A': 226, 'C': 266, 'G': 200, 'T': 308}, 173000: {'A': 361, 'C': 180, 'G': 183, 'T': 276}, 174000: {'A': 302, 'C': 191, 'G': 218, 'T': 289}, 175000: {'A': 317, 'C': 192, 'G': 281, 'T': 210}, 176000: {'A': 256, 'C': 244, 'G': 217, 'T': 283}, 177000: {'A': 282, 'C': 243, 'G': 201, 'T': 274}, 178000: {'A': 321, 'C': 207, 'G': 191, 'T': 281}, 179000: {'A': 266, 'C': 244, 'G': 214, 'T': 276}, 180000: {'A': 315, 'C': 205, 'G': 215, 'T': 265}, 181000: {'A': 338, 'C': 203, 'G': 248, 'T': 211}, 182000: {'A': 155, 'C': 92, 'G': 80, 'T': 112}}\n"]}]},{"cell_type":"code","source":["#question 4a\n","#creating a list  with 4 elements, containing the number of times each nucleotide (A,C,G,T) is contained in the first 1000 base pairs.\n","base_counts=[my_dict[0]['A'],my_dict[0]['C'],my_dict[0]['G'],my_dict[0]['T']]\n","print(base_counts)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8ei6mu0x7QXc","executionInfo":{"status":"ok","timestamp":1727302848536,"user_tz":240,"elapsed":171,"user":{"displayName":"Sharmila Tummala","userId":"17729261948442999683"}},"outputId":"ce7c8bdd-42f2-4f6a-d230-dc14400e1957"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["[278, 234, 257, 231]\n"]}]},{"cell_type":"code","source":["#question b\n","for i in my_dict:\n","  base_count=[my_dict[i]['A'],my_dict[i]['C'],my_dict[i]['G'],my_dict[i]['T']]\n","  print (i,\"=\", base_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"eTBnUjQ-RmVq","executionInfo":{"status":"ok","timestamp":1727303354446,"user_tz":240,"elapsed":301,"user":{"displayName":"Sharmila Tummala","userId":"17729261948442999683"}},"outputId":"853deb3d-b37c-4a83-cbd4-19b078a066c6"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["0 = [278, 234, 257, 231]\n","1000 = [265, 239, 222, 274]\n","2000 = [258, 252, 255, 235]\n","3000 = [396, 168, 267, 169]\n","4000 = [297, 219, 205, 279]\n","5000 = [201, 257, 208, 334]\n","6000 = [244, 243, 201, 312]\n","7000 = [271, 232, 282, 215]\n","8000 = [279, 236, 229, 256]\n","9000 = [269, 252, 222, 257]\n","10000 = [177, 255, 206, 362]\n","11000 = [260, 238, 204, 298]\n","12000 = [273, 220, 273, 234]\n","13000 = [287, 240, 192, 281]\n","14000 = [215, 252, 196, 337]\n","15000 = [290, 220, 199, 291]\n","16000 = [346, 205, 193, 256]\n","17000 = [293, 231, 240, 236]\n","18000 = [289, 214, 288, 209]\n","19000 = [184, 264, 250, 302]\n","20000 = [332, 222, 242, 204]\n","21000 = [278, 229, 228, 265]\n","22000 = [279, 252, 244, 225]\n","23000 = [251, 250, 236, 263]\n","24000 = [396, 176, 266, 162]\n","25000 = [264, 227, 218, 291]\n","26000 = [211, 249, 207, 333]\n","27000 = [271, 223, 212, 294]\n","28000 = [282, 234, 275, 209]\n","29000 = [287, 243, 229, 241]\n","30000 = [231, 256, 205, 308]\n","31000 = [176, 244, 211, 369]\n","32000 = [276, 235, 217, 272]\n","33000 = [295, 225, 261, 219]\n","34000 = [240, 254, 202, 304]\n","35000 = [236, 242, 183, 339]\n","36000 = [328, 203, 185, 284]\n","37000 = [306, 232, 206, 256]\n","38000 = [193, 280, 229, 298]\n","39000 = [273, 261, 226, 240]\n","40000 = [305, 194, 242, 259]\n","41000 = [271, 201, 219, 309]\n","42000 = [299, 219, 187, 295]\n","43000 = [289, 222, 255, 234]\n","44000 = [176, 351, 256, 217]\n","45000 = [230, 234, 309, 227]\n","46000 = [284, 212, 250, 254]\n","47000 = [270, 207, 224, 299]\n","48000 = [195, 265, 231, 309]\n","49000 = [200, 247, 225, 328]\n","50000 = [203, 261, 251, 285]\n","51000 = [234, 242, 222, 302]\n","52000 = [215, 223, 249, 313]\n","53000 = [219, 259, 207, 315]\n","54000 = [254, 222, 202, 322]\n","55000 = [223, 212, 202, 363]\n","56000 = [182, 297, 240, 281]\n","57000 = [229, 214, 227, 330]\n","58000 = [283, 184, 251, 282]\n","59000 = [253, 183, 245, 319]\n","60000 = [233, 186, 288, 293]\n","61000 = [242, 209, 207, 342]\n","62000 = [277, 229, 226, 268]\n","63000 = [230, 254, 256, 260]\n","64000 = [258, 206, 228, 308]\n","65000 = [261, 192, 281, 266]\n","66000 = [235, 238, 211, 316]\n","67000 = [273, 211, 248, 268]\n","68000 = [252, 240, 193, 315]\n","69000 = [252, 246, 242, 260]\n","70000 = [245, 236, 257, 262]\n","71000 = [247, 207, 234, 312]\n","72000 = [256, 246, 260, 238]\n","73000 = [286, 204, 248, 262]\n","74000 = [213, 262, 214, 311]\n","75000 = [267, 237, 302, 194]\n","76000 = [258, 236, 250, 256]\n","77000 = [214, 271, 227, 288]\n","78000 = [252, 249, 205, 294]\n","79000 = [256, 229, 265, 250]\n","80000 = [204, 244, 293, 259]\n","81000 = [212, 286, 237, 265]\n","82000 = [220, 257, 190, 333]\n","83000 = [211, 227, 202, 360]\n","84000 = [210, 286, 254, 250]\n","85000 = [236, 266, 249, 249]\n","86000 = [176, 260, 250, 314]\n","87000 = [188, 317, 254, 241]\n","88000 = [192, 300, 299, 209]\n","89000 = [243, 299, 275, 183]\n","90000 = [213, 263, 248, 276]\n","91000 = [215, 281, 283, 221]\n","92000 = [141, 316, 376, 167]\n","93000 = [199, 322, 251, 228]\n","94000 = [237, 238, 351, 174]\n","95000 = [202, 275, 298, 225]\n","96000 = [204, 344, 216, 236]\n","97000 = [215, 278, 280, 227]\n","98000 = [190, 290, 231, 289]\n","99000 = [309, 205, 261, 225]\n","100000 = [210, 296, 286, 208]\n","101000 = [205, 271, 211, 313]\n","102000 = [245, 238, 178, 339]\n","103000 = [220, 226, 192, 362]\n","104000 = [331, 169, 222, 278]\n","105000 = [346, 198, 234, 222]\n","106000 = [220, 280, 262, 238]\n","107000 = [291, 187, 282, 240]\n","108000 = [238, 242, 286, 234]\n","109000 = [256, 253, 311, 180]\n","110000 = [208, 270, 340, 182]\n","111000 = [174, 265, 351, 210]\n","112000 = [213, 265, 318, 204]\n","113000 = [226, 229, 338, 207]\n","114000 = [224, 264, 301, 211]\n","115000 = [265, 238, 269, 228]\n","116000 = [194, 320, 272, 214]\n","117000 = [166, 337, 259, 238]\n","118000 = [194, 302, 284, 220]\n","119000 = [249, 294, 276, 181]\n","120000 = [270, 258, 219, 253]\n","121000 = [298, 254, 210, 238]\n","122000 = [265, 246, 221, 268]\n","123000 = [289, 211, 254, 246]\n","124000 = [331, 227, 231, 211]\n","125000 = [278, 214, 246, 262]\n","126000 = [284, 234, 229, 253]\n","127000 = [231, 266, 227, 276]\n","128000 = [306, 195, 250, 249]\n","129000 = [293, 205, 197, 305]\n","130000 = [300, 211, 200, 289]\n","131000 = [337, 213, 236, 214]\n","132000 = [352, 204, 209, 235]\n","133000 = [296, 212, 233, 259]\n","134000 = [313, 203, 239, 245]\n","135000 = [262, 261, 195, 282]\n","136000 = [336, 199, 207, 258]\n","137000 = [217, 257, 203, 323]\n","138000 = [289, 216, 226, 269]\n","139000 = [251, 231, 209, 309]\n","140000 = [241, 248, 205, 306]\n","141000 = [334, 208, 233, 225]\n","142000 = [243, 252, 208, 297]\n","143000 = [315, 211, 274, 200]\n","144000 = [278, 234, 193, 295]\n","145000 = [322, 204, 191, 283]\n","146000 = [302, 209, 239, 250]\n","147000 = [231, 257, 218, 294]\n","148000 = [337, 203, 216, 244]\n","149000 = [318, 209, 201, 272]\n","150000 = [274, 243, 227, 256]\n","151000 = [307, 215, 230, 248]\n","152000 = [287, 203, 200, 310]\n","153000 = [309, 214, 214, 263]\n","154000 = [380, 179, 151, 290]\n","155000 = [298, 199, 230, 273]\n","156000 = [295, 197, 228, 280]\n","157000 = [290, 225, 225, 260]\n","158000 = [252, 208, 176, 364]\n","159000 = [210, 251, 196, 343]\n","160000 = [341, 223, 211, 225]\n","161000 = [406, 162, 192, 240]\n","162000 = [280, 219, 210, 291]\n","163000 = [184, 272, 216, 328]\n","164000 = [269, 236, 132, 363]\n","165000 = [250, 237, 208, 305]\n","166000 = [257, 230, 172, 341]\n","167000 = [258, 245, 205, 292]\n","168000 = [281, 206, 197, 316]\n","169000 = [232, 262, 229, 277]\n","170000 = [245, 220, 201, 334]\n","171000 = [338, 164, 185, 313]\n","172000 = [226, 266, 200, 308]\n","173000 = [361, 180, 183, 276]\n","174000 = [302, 191, 218, 289]\n","175000 = [317, 192, 281, 210]\n","176000 = [256, 244, 217, 283]\n","177000 = [282, 243, 201, 274]\n","178000 = [321, 207, 191, 281]\n","179000 = [266, 244, 214, 276]\n","180000 = [315, 205, 215, 265]\n","181000 = [338, 203, 248, 211]\n","182000 = [155, 92, 80, 112]\n"]}]},{"cell_type":"code","source":["#4c\n","base_count_list=[]\n","for i in my_dict:\n","  base_count=[my_dict[i]['A'],my_dict[i]['C'],my_dict[i]['G'],my_dict[i]['T']]\n","  base_count_list.append([base_count])\n","print (base_count_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k-h3c2VtTvbv","executionInfo":{"status":"ok","timestamp":1727304211153,"user_tz":240,"elapsed":183,"user":{"displayName":"Sharmila Tummala","userId":"17729261948442999683"}},"outputId":"79e1b9a0-9f6b-4d61-e285-df60a833ddea"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[278, 234, 257, 231]], [[265, 239, 222, 274]], [[258, 252, 255, 235]], [[396, 168, 267, 169]], [[297, 219, 205, 279]], [[201, 257, 208, 334]], [[244, 243, 201, 312]], [[271, 232, 282, 215]], [[279, 236, 229, 256]], [[269, 252, 222, 257]], [[177, 255, 206, 362]], [[260, 238, 204, 298]], [[273, 220, 273, 234]], [[287, 240, 192, 281]], [[215, 252, 196, 337]], [[290, 220, 199, 291]], [[346, 205, 193, 256]], [[293, 231, 240, 236]], [[289, 214, 288, 209]], [[184, 264, 250, 302]], [[332, 222, 242, 204]], [[278, 229, 228, 265]], [[279, 252, 244, 225]], [[251, 250, 236, 263]], [[396, 176, 266, 162]], [[264, 227, 218, 291]], [[211, 249, 207, 333]], [[271, 223, 212, 294]], [[282, 234, 275, 209]], [[287, 243, 229, 241]], [[231, 256, 205, 308]], [[176, 244, 211, 369]], [[276, 235, 217, 272]], [[295, 225, 261, 219]], [[240, 254, 202, 304]], [[236, 242, 183, 339]], [[328, 203, 185, 284]], [[306, 232, 206, 256]], [[193, 280, 229, 298]], [[273, 261, 226, 240]], [[305, 194, 242, 259]], [[271, 201, 219, 309]], [[299, 219, 187, 295]], [[289, 222, 255, 234]], [[176, 351, 256, 217]], [[230, 234, 309, 227]], [[284, 212, 250, 254]], [[270, 207, 224, 299]], [[195, 265, 231, 309]], [[200, 247, 225, 328]], [[203, 261, 251, 285]], [[234, 242, 222, 302]], [[215, 223, 249, 313]], [[219, 259, 207, 315]], [[254, 222, 202, 322]], [[223, 212, 202, 363]], [[182, 297, 240, 281]], [[229, 214, 227, 330]], [[283, 184, 251, 282]], [[253, 183, 245, 319]], [[233, 186, 288, 293]], [[242, 209, 207, 342]], [[277, 229, 226, 268]], [[230, 254, 256, 260]], [[258, 206, 228, 308]], [[261, 192, 281, 266]], [[235, 238, 211, 316]], [[273, 211, 248, 268]], [[252, 240, 193, 315]], [[252, 246, 242, 260]], [[245, 236, 257, 262]], [[247, 207, 234, 312]], [[256, 246, 260, 238]], [[286, 204, 248, 262]], [[213, 262, 214, 311]], [[267, 237, 302, 194]], [[258, 236, 250, 256]], [[214, 271, 227, 288]], [[252, 249, 205, 294]], [[256, 229, 265, 250]], [[204, 244, 293, 259]], [[212, 286, 237, 265]], [[220, 257, 190, 333]], [[211, 227, 202, 360]], [[210, 286, 254, 250]], [[236, 266, 249, 249]], [[176, 260, 250, 314]], [[188, 317, 254, 241]], [[192, 300, 299, 209]], [[243, 299, 275, 183]], [[213, 263, 248, 276]], [[215, 281, 283, 221]], [[141, 316, 376, 167]], [[199, 322, 251, 228]], [[237, 238, 351, 174]], [[202, 275, 298, 225]], [[204, 344, 216, 236]], [[215, 278, 280, 227]], [[190, 290, 231, 289]], [[309, 205, 261, 225]], [[210, 296, 286, 208]], [[205, 271, 211, 313]], [[245, 238, 178, 339]], [[220, 226, 192, 362]], [[331, 169, 222, 278]], [[346, 198, 234, 222]], [[220, 280, 262, 238]], [[291, 187, 282, 240]], [[238, 242, 286, 234]], [[256, 253, 311, 180]], [[208, 270, 340, 182]], [[174, 265, 351, 210]], [[213, 265, 318, 204]], [[226, 229, 338, 207]], [[224, 264, 301, 211]], [[265, 238, 269, 228]], [[194, 320, 272, 214]], [[166, 337, 259, 238]], [[194, 302, 284, 220]], [[249, 294, 276, 181]], [[270, 258, 219, 253]], [[298, 254, 210, 238]], [[265, 246, 221, 268]], [[289, 211, 254, 246]], [[331, 227, 231, 211]], [[278, 214, 246, 262]], [[284, 234, 229, 253]], [[231, 266, 227, 276]], [[306, 195, 250, 249]], [[293, 205, 197, 305]], [[300, 211, 200, 289]], [[337, 213, 236, 214]], [[352, 204, 209, 235]], [[296, 212, 233, 259]], [[313, 203, 239, 245]], [[262, 261, 195, 282]], [[336, 199, 207, 258]], [[217, 257, 203, 323]], [[289, 216, 226, 269]], [[251, 231, 209, 309]], [[241, 248, 205, 306]], [[334, 208, 233, 225]], [[243, 252, 208, 297]], [[315, 211, 274, 200]], [[278, 234, 193, 295]], [[322, 204, 191, 283]], [[302, 209, 239, 250]], [[231, 257, 218, 294]], [[337, 203, 216, 244]], [[318, 209, 201, 272]], [[274, 243, 227, 256]], [[307, 215, 230, 248]], [[287, 203, 200, 310]], [[309, 214, 214, 263]], [[380, 179, 151, 290]], [[298, 199, 230, 273]], [[295, 197, 228, 280]], [[290, 225, 225, 260]], [[252, 208, 176, 364]], [[210, 251, 196, 343]], [[341, 223, 211, 225]], [[406, 162, 192, 240]], [[280, 219, 210, 291]], [[184, 272, 216, 328]], [[269, 236, 132, 363]], [[250, 237, 208, 305]], [[257, 230, 172, 341]], [[258, 245, 205, 292]], [[281, 206, 197, 316]], [[232, 262, 229, 277]], [[245, 220, 201, 334]], [[338, 164, 185, 313]], [[226, 266, 200, 308]], [[361, 180, 183, 276]], [[302, 191, 218, 289]], [[317, 192, 281, 210]], [[256, 244, 217, 283]], [[282, 243, 201, 274]], [[321, 207, 191, 281]], [[266, 244, 214, 276]], [[315, 205, 215, 265]], [[338, 203, 248, 211]], [[155, 92, 80, 112]]]\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"AhT2tTNLeSAM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#4d\n","x=[]\n","for i in base_count_list:\n","\n","  x.append(sum(i[0]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k4N0i3MCWrdD","executionInfo":{"status":"ok","timestamp":1727305061150,"user_tz":240,"elapsed":143,"user":{"displayName":"Sharmila Tummala","userId":"17729261948442999683"}},"outputId":"7aa8596d-a586-45dc-f127-f59a47a0a217"},"execution_count":85,"outputs":[{"output_type":"stream","name":"stdout","text":["182439\nn"]}]},{"cell_type":"code","source":["#4e\n","'''1. The expected answer is 1000 as the sum for each list since the sum is nothing but the total number of nucleotides for every 1000 nucleotides except for the last list\n","2. no\n","3. here is my explanation for the deviation of sum of last list from the standard 1000\n","the sequence has 182439 nucleotides. since the step size is 1000 for creating the dictionary named my_dict, the last itertion only has 439 nucleotides left. We made a list from the same dictionary thus the sum of all nucleotide base count in the last list is 439'''\n","\n","#to verify please use this code I am mentioning as comments here\n","#print(len(seq))\n","#print(x)"],"metadata":{"id":"oKYU53aXYMi3"},"execution_count":null,"outputs":[]}]}